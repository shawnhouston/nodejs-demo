---
apiVersion: v1
kind: Secret
metadata:
  name: my-nodejs-postgresql-persistent
stringData:
  database-admin-password: "BadPassW0rdAdmin"
  database-password: "BadPassW0rd99"
  database-user: "usera39"
...
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    description: Exposes and load balances the application pods
    service.alpha.openshift.io/dependencies: '[{"name": "postgresql", "kind": "Service"}]'
  name: my-nodejs-postgresql-persistent
spec:
  ports:
  - name: web
    port: 8080
    targetPort: 8080
  selector:
    name: my-nodejs-postgresql-persistent
...
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: my-nodejs-postgresql-persistent
spec:
  to:
    kind: Service
    name: my-nodejs-postgresql-persistent
...
---
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  annotations:
    description: Keeps track of changes in the application image
  name: my-nodejs-postgresql-persistent
...
---
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  annotations:
    description: Defines how to build the application
    template.alpha.openshift.io/wait-for-ready: "true"
  name: my-nodejs-postgresql-persistent
spec:
  output:
    to:
      kind: ImageStreamTag
      name: my-nodejs-postgresql-persistent:latest
  postCommit: {}
  source:
    git:
      uri: https://github.com/shawnhouston/nodejs-demo.git
    type: Git
  strategy:
    sourceStrategy:
      from:
        kind: DockerImage
        name: registry.redhat.io/rhel8/nodejs-12
    type: Source
  triggers:
  - type: ImageChange
  - type: ConfigChange
...
---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  annotations:
    description: Defines how to deploy the application server
    template.alpha.openshift.io/wait-for-ready: "true"
  labels:
    app.openshift.io/runtime: nodejs
  name: my-nodejs-postgresql-persistent
spec:
  replicas: 1
  selector:
    name: my-nodejs-postgresql-persistent
  strategy:
    type: Rolling
  template:
    metadata:
      labels:
        app.openshift.io/runtime: nodejs
        name: my-nodejs-postgresql-persistent
      name: my-nodejs-postgresql-persistent
    spec:
      containers:
      - env:
        - name: DATABASE_SERVICE_NAME
          value: postgresql
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              key: database-user
              name: my-nodejs-postgresql-persistent
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: my-nodejs-postgresql-persistent
        - name: POSTGRESQL_DATABASE
          value: my_data
        - name: POSTGRESQL_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-admin-password
              name: my-nodejs-postgresql-persistent
        image: ' '
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 30
          timeoutSeconds: 3
        name: my-nodejs-postgresql-persistent
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 3
          timeoutSeconds: 3
        resources:
          limits:
            memory: 256Mi
  triggers:
  - imageChangeParams:
      automatic: true
      containerNames:
      - my-nodejs-postgresql-persistent
      from:
        kind: ImageStreamTag
        name: my-nodejs-postgresql-persistent:latest
    type: ImageChange
  - type: ConfigChange
...
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql
  labels:
    appname: nodejs-app
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: ocs-storagecluster-ceph-rbdmirror
...
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    description: Exposes the database server
  name: postgresql
spec:
  ports:
  - name: postgresql
    port: 5432
    targetPort: 5432
  selector:
    name: postgresql
...
---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  annotations:
    description: Defines how to deploy the database
    template.alpha.openshift.io/wait-for-ready: "true"
  name: postgresql
spec:
  replicas: 1
  selector:
    name: postgresql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: postgresql
      name: postgresql
    spec:
      containers:
      - env:
        - name: POSTGRESQL_USER
          valueFrom:
            secretKeyRef:
              key: database-user
              name: my-nodejs-postgresql-persistent
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-password
              name: my-nodejs-postgresql-persistent
        - name: POSTGRESQL_DATABASE
          value: my_data
        - name: POSTGRESQL_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: database-admin-password
              name: my-nodejs-postgresql-persistent
        image: ' '
        livenessProbe:
          initialDelaySeconds: 30
          tcpSocket:
            port: 5432
          timeoutSeconds: 1
        name: postgresql
        ports:
        - containerPort: 5432
        resources:
          limits:
            memory: 256Mi
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgresql-data
      volumes:
      - name: postgresql-data
        persistentVolumeClaim:
          claimName: postgresql
  triggers:
  - imageChangeParams:
      automatic: true
      containerNames:
      - postgresql
      from:
        kind: ImageStreamTag
        name: postgresql:12-el8
        namespace: openshift
    type: ImageChange
  - type: ConfigChange
...
